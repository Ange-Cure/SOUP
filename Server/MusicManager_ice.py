# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `MusicManager.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MusicServer
_M_MusicServer = Ice.openModule('MusicServer')
__name__ = 'MusicServer'

if 'MusicNotFoundError' not in _M_MusicServer.__dict__:
    _M_MusicServer.MusicNotFoundError = Ice.createTempClass()
    class MusicNotFoundError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::MusicServer::MusicNotFoundError'

    _M_MusicServer._t_MusicNotFoundError = IcePy.defineException('::MusicServer::MusicNotFoundError', MusicNotFoundError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    MusicNotFoundError._ice_type = _M_MusicServer._t_MusicNotFoundError

    _M_MusicServer.MusicNotFoundError = MusicNotFoundError
    del MusicNotFoundError

if '_t_Bytes' not in _M_MusicServer.__dict__:
    _M_MusicServer._t_Bytes = IcePy.defineSequence('::MusicServer::Bytes', (), IcePy._t_byte)

if 'MusicInfo' not in _M_MusicServer.__dict__:
    _M_MusicServer.MusicInfo = Ice.createTempClass()
    class MusicInfo(object):
        def __init__(self, title='', artist=''):
            self.title = title
            self.artist = artist

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MusicServer.MusicInfo):
                return NotImplemented
            else:
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MusicServer._t_MusicInfo)

        __repr__ = __str__

    _M_MusicServer._t_MusicInfo = IcePy.defineStruct('::MusicServer::MusicInfo', MusicInfo, (), (
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string)
    ))

    _M_MusicServer.MusicInfo = MusicInfo
    del MusicInfo

if '_t_seqMusicInfo' not in _M_MusicServer.__dict__:
    _M_MusicServer._t_seqMusicInfo = IcePy.defineSequence('::MusicServer::seqMusicInfo', (), _M_MusicServer._t_MusicInfo)

_M_MusicServer._t_MusicManager = IcePy.defineValue('::MusicServer::MusicManager', Ice.Value, -1, (), False, True, None, ())

if 'MusicManagerPrx' not in _M_MusicServer.__dict__:
    _M_MusicServer.MusicManagerPrx = Ice.createTempClass()
    class MusicManagerPrx(Ice.ObjectPrx):

        def listAllMusic(self, context=None):
            return _M_MusicServer.MusicManager._op_listAllMusic.invoke(self, ((), context))

        def listAllMusicAsync(self, context=None):
            return _M_MusicServer.MusicManager._op_listAllMusic.invokeAsync(self, ((), context))

        def begin_listAllMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_listAllMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_listAllMusic(self, _r):
            return _M_MusicServer.MusicManager._op_listAllMusic.end(self, _r)

        def listMusicByTitle(self, title, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByTitle.invoke(self, ((title, ), context))

        def listMusicByTitleAsync(self, title, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByTitle.invokeAsync(self, ((title, ), context))

        def begin_listMusicByTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_listMusicByTitle(self, _r):
            return _M_MusicServer.MusicManager._op_listMusicByTitle.end(self, _r)

        def listMusicByArtist(self, artist, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByArtist.invoke(self, ((artist, ), context))

        def listMusicByArtistAsync(self, artist, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByArtist.invokeAsync(self, ((artist, ), context))

        def begin_listMusicByArtist(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_listMusicByArtist.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_listMusicByArtist(self, _r):
            return _M_MusicServer.MusicManager._op_listMusicByArtist.end(self, _r)

        def addMusic(self, file, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_addMusic.invoke(self, ((file, title, artist), context))

        def addMusicAsync(self, file, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_addMusic.invokeAsync(self, ((file, title, artist), context))

        def begin_addMusic(self, file, title, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_addMusic.begin(self, ((file, title, artist), _response, _ex, _sent, context))

        def end_addMusic(self, _r):
            return _M_MusicServer.MusicManager._op_addMusic.end(self, _r)

        def deleteMusic(self, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_deleteMusic.invoke(self, ((title, artist), context))

        def deleteMusicAsync(self, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_deleteMusic.invokeAsync(self, ((title, artist), context))

        def begin_deleteMusic(self, title, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_deleteMusic.begin(self, ((title, artist), _response, _ex, _sent, context))

        def end_deleteMusic(self, _r):
            return _M_MusicServer.MusicManager._op_deleteMusic.end(self, _r)

        def updateMusic(self, title, artist, newTitle, newArtist, context=None):
            return _M_MusicServer.MusicManager._op_updateMusic.invoke(self, ((title, artist, newTitle, newArtist), context))

        def updateMusicAsync(self, title, artist, newTitle, newArtist, context=None):
            return _M_MusicServer.MusicManager._op_updateMusic.invokeAsync(self, ((title, artist, newTitle, newArtist), context))

        def begin_updateMusic(self, title, artist, newTitle, newArtist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_updateMusic.begin(self, ((title, artist, newTitle, newArtist), _response, _ex, _sent, context))

        def end_updateMusic(self, _r):
            return _M_MusicServer.MusicManager._op_updateMusic.end(self, _r)

        def playMusic(self, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_playMusic.invoke(self, ((title, artist), context))

        def playMusicAsync(self, title, artist, context=None):
            return _M_MusicServer.MusicManager._op_playMusic.invokeAsync(self, ((title, artist), context))

        def begin_playMusic(self, title, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicServer.MusicManager._op_playMusic.begin(self, ((title, artist), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_MusicServer.MusicManager._op_playMusic.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MusicServer.MusicManagerPrx.ice_checkedCast(proxy, '::MusicServer::MusicManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MusicServer.MusicManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MusicServer::MusicManager'
    _M_MusicServer._t_MusicManagerPrx = IcePy.defineProxy('::MusicServer::MusicManager', MusicManagerPrx)

    _M_MusicServer.MusicManagerPrx = MusicManagerPrx
    del MusicManagerPrx

    _M_MusicServer.MusicManager = Ice.createTempClass()
    class MusicManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MusicServer::MusicManager')

        def ice_id(self, current=None):
            return '::MusicServer::MusicManager'

        @staticmethod
        def ice_staticId():
            return '::MusicServer::MusicManager'

        def listAllMusic(self, current=None):
            raise NotImplementedError("servant method 'listAllMusic' not implemented")

        def listMusicByTitle(self, title, current=None):
            raise NotImplementedError("servant method 'listMusicByTitle' not implemented")

        def listMusicByArtist(self, artist, current=None):
            raise NotImplementedError("servant method 'listMusicByArtist' not implemented")

        def addMusic(self, file, title, artist, current=None):
            raise NotImplementedError("servant method 'addMusic' not implemented")

        def deleteMusic(self, title, artist, current=None):
            raise NotImplementedError("servant method 'deleteMusic' not implemented")

        def updateMusic(self, title, artist, newTitle, newArtist, current=None):
            raise NotImplementedError("servant method 'updateMusic' not implemented")

        def playMusic(self, title, artist, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MusicServer._t_MusicManagerDisp)

        __repr__ = __str__

    _M_MusicServer._t_MusicManagerDisp = IcePy.defineClass('::MusicServer::MusicManager', MusicManager, (), None, ())
    MusicManager._ice_type = _M_MusicServer._t_MusicManagerDisp

    MusicManager._op_listAllMusic = IcePy.Operation('listAllMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_MusicServer._t_seqMusicInfo, False, 0), ())
    MusicManager._op_listMusicByTitle = IcePy.Operation('listMusicByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_MusicServer._t_seqMusicInfo, False, 0), ())
    MusicManager._op_listMusicByArtist = IcePy.Operation('listMusicByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_MusicServer._t_seqMusicInfo, False, 0), ())
    MusicManager._op_addMusic = IcePy.Operation('addMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_MusicServer._t_Bytes, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    MusicManager._op_deleteMusic = IcePy.Operation('deleteMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_MusicServer._t_MusicNotFoundError,))
    MusicManager._op_updateMusic = IcePy.Operation('updateMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    MusicManager._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_MusicServer._t_Bytes, False, 0), (_M_MusicServer._t_MusicNotFoundError,))

    _M_MusicServer.MusicManager = MusicManager
    del MusicManager

# End of module MusicServer
